// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: request/turms_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Client -> Server -> Client
public struct TurmsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Note: request_id is allowed to be duplicated because
  ///
  /// it is used for clients to identify the response of the same request id in a session
  public var requestID: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._requestID ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._requestID = newValue}
  }
  /// Returns true if `requestID` has been explicitly set.
  public var hasRequestID: Bool {return _storage._requestID != nil}
  /// Clears the value of `requestID`. Subsequent reads from it will return its default value.
  public mutating func clearRequestID() {_uniqueStorage()._requestID = nil}

  public var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// Signal
  public var ackRequest: AckRequest {
    get {
      if case .ackRequest(let v)? = _storage._kind {return v}
      return AckRequest()
    }
    set {_uniqueStorage()._kind = .ackRequest(newValue)}
  }

  /// Message
  public var createMessageRequest: CreateMessageRequest {
    get {
      if case .createMessageRequest(let v)? = _storage._kind {return v}
      return CreateMessageRequest()
    }
    set {_uniqueStorage()._kind = .createMessageRequest(newValue)}
  }

  public var queryMessageStatusesRequest: QueryMessageStatusesRequest {
    get {
      if case .queryMessageStatusesRequest(let v)? = _storage._kind {return v}
      return QueryMessageStatusesRequest()
    }
    set {_uniqueStorage()._kind = .queryMessageStatusesRequest(newValue)}
  }

  public var queryMessagesRequest: QueryMessagesRequest {
    get {
      if case .queryMessagesRequest(let v)? = _storage._kind {return v}
      return QueryMessagesRequest()
    }
    set {_uniqueStorage()._kind = .queryMessagesRequest(newValue)}
  }

  public var queryPendingMessagesWithTotalRequest: QueryPendingMessagesWithTotalRequest {
    get {
      if case .queryPendingMessagesWithTotalRequest(let v)? = _storage._kind {return v}
      return QueryPendingMessagesWithTotalRequest()
    }
    set {_uniqueStorage()._kind = .queryPendingMessagesWithTotalRequest(newValue)}
  }

  public var updateMessageRequest: UpdateMessageRequest {
    get {
      if case .updateMessageRequest(let v)? = _storage._kind {return v}
      return UpdateMessageRequest()
    }
    set {_uniqueStorage()._kind = .updateMessageRequest(newValue)}
  }

  public var updateTypingStatusRequest: UpdateTypingStatusRequest {
    get {
      if case .updateTypingStatusRequest(let v)? = _storage._kind {return v}
      return UpdateTypingStatusRequest()
    }
    set {_uniqueStorage()._kind = .updateTypingStatusRequest(newValue)}
  }

  /// User
  public var queryUserGroupInvitationsRequest: QueryUserGroupInvitationsRequest {
    get {
      if case .queryUserGroupInvitationsRequest(let v)? = _storage._kind {return v}
      return QueryUserGroupInvitationsRequest()
    }
    set {_uniqueStorage()._kind = .queryUserGroupInvitationsRequest(newValue)}
  }

  public var queryUserProfileRequest: QueryUserProfileRequest {
    get {
      if case .queryUserProfileRequest(let v)? = _storage._kind {return v}
      return QueryUserProfileRequest()
    }
    set {_uniqueStorage()._kind = .queryUserProfileRequest(newValue)}
  }

  public var queryUsersIdsNearbyRequest: QueryUsersIdsNearbyRequest {
    get {
      if case .queryUsersIdsNearbyRequest(let v)? = _storage._kind {return v}
      return QueryUsersIdsNearbyRequest()
    }
    set {_uniqueStorage()._kind = .queryUsersIdsNearbyRequest(newValue)}
  }

  public var queryUsersInfosNearbyRequest: QueryUsersInfosNearbyRequest {
    get {
      if case .queryUsersInfosNearbyRequest(let v)? = _storage._kind {return v}
      return QueryUsersInfosNearbyRequest()
    }
    set {_uniqueStorage()._kind = .queryUsersInfosNearbyRequest(newValue)}
  }

  public var queryUsersOnlineStatusRequest: QueryUsersOnlineStatusRequest {
    get {
      if case .queryUsersOnlineStatusRequest(let v)? = _storage._kind {return v}
      return QueryUsersOnlineStatusRequest()
    }
    set {_uniqueStorage()._kind = .queryUsersOnlineStatusRequest(newValue)}
  }

  public var updateUserLocationRequest: UpdateUserLocationRequest {
    get {
      if case .updateUserLocationRequest(let v)? = _storage._kind {return v}
      return UpdateUserLocationRequest()
    }
    set {_uniqueStorage()._kind = .updateUserLocationRequest(newValue)}
  }

  public var updateUserOnlineStatusRequest: UpdateUserOnlineStatusRequest {
    get {
      if case .updateUserOnlineStatusRequest(let v)? = _storage._kind {return v}
      return UpdateUserOnlineStatusRequest()
    }
    set {_uniqueStorage()._kind = .updateUserOnlineStatusRequest(newValue)}
  }

  public var updateUserRequest: UpdateUserRequest {
    get {
      if case .updateUserRequest(let v)? = _storage._kind {return v}
      return UpdateUserRequest()
    }
    set {_uniqueStorage()._kind = .updateUserRequest(newValue)}
  }

  /// User Relationship
  public var createFriendRequestRequest: CreateFriendRequestRequest {
    get {
      if case .createFriendRequestRequest(let v)? = _storage._kind {return v}
      return CreateFriendRequestRequest()
    }
    set {_uniqueStorage()._kind = .createFriendRequestRequest(newValue)}
  }

  public var createRelationshipGroupRequest: CreateRelationshipGroupRequest {
    get {
      if case .createRelationshipGroupRequest(let v)? = _storage._kind {return v}
      return CreateRelationshipGroupRequest()
    }
    set {_uniqueStorage()._kind = .createRelationshipGroupRequest(newValue)}
  }

  public var createRelationshipRequest: CreateRelationshipRequest {
    get {
      if case .createRelationshipRequest(let v)? = _storage._kind {return v}
      return CreateRelationshipRequest()
    }
    set {_uniqueStorage()._kind = .createRelationshipRequest(newValue)}
  }

  public var deleteRelationshipGroupRequest: DeleteRelationshipGroupRequest {
    get {
      if case .deleteRelationshipGroupRequest(let v)? = _storage._kind {return v}
      return DeleteRelationshipGroupRequest()
    }
    set {_uniqueStorage()._kind = .deleteRelationshipGroupRequest(newValue)}
  }

  public var deleteRelationshipRequest: DeleteRelationshipRequest {
    get {
      if case .deleteRelationshipRequest(let v)? = _storage._kind {return v}
      return DeleteRelationshipRequest()
    }
    set {_uniqueStorage()._kind = .deleteRelationshipRequest(newValue)}
  }

  public var queryFriendRequestsRequest: QueryFriendRequestsRequest {
    get {
      if case .queryFriendRequestsRequest(let v)? = _storage._kind {return v}
      return QueryFriendRequestsRequest()
    }
    set {_uniqueStorage()._kind = .queryFriendRequestsRequest(newValue)}
  }

  public var queryRelatedUsersIdsRequest: QueryRelatedUsersIdsRequest {
    get {
      if case .queryRelatedUsersIdsRequest(let v)? = _storage._kind {return v}
      return QueryRelatedUsersIdsRequest()
    }
    set {_uniqueStorage()._kind = .queryRelatedUsersIdsRequest(newValue)}
  }

  public var queryRelationshipGroupsRequest: QueryRelationshipGroupsRequest {
    get {
      if case .queryRelationshipGroupsRequest(let v)? = _storage._kind {return v}
      return QueryRelationshipGroupsRequest()
    }
    set {_uniqueStorage()._kind = .queryRelationshipGroupsRequest(newValue)}
  }

  public var queryRelationshipsRequest: QueryRelationshipsRequest {
    get {
      if case .queryRelationshipsRequest(let v)? = _storage._kind {return v}
      return QueryRelationshipsRequest()
    }
    set {_uniqueStorage()._kind = .queryRelationshipsRequest(newValue)}
  }

  public var updateFriendRequestRequest: UpdateFriendRequestRequest {
    get {
      if case .updateFriendRequestRequest(let v)? = _storage._kind {return v}
      return UpdateFriendRequestRequest()
    }
    set {_uniqueStorage()._kind = .updateFriendRequestRequest(newValue)}
  }

  public var updateRelationshipGroupRequest: UpdateRelationshipGroupRequest {
    get {
      if case .updateRelationshipGroupRequest(let v)? = _storage._kind {return v}
      return UpdateRelationshipGroupRequest()
    }
    set {_uniqueStorage()._kind = .updateRelationshipGroupRequest(newValue)}
  }

  public var updateRelationshipRequest: UpdateRelationshipRequest {
    get {
      if case .updateRelationshipRequest(let v)? = _storage._kind {return v}
      return UpdateRelationshipRequest()
    }
    set {_uniqueStorage()._kind = .updateRelationshipRequest(newValue)}
  }

  /// Group
  public var createGroupRequest: CreateGroupRequest {
    get {
      if case .createGroupRequest(let v)? = _storage._kind {return v}
      return CreateGroupRequest()
    }
    set {_uniqueStorage()._kind = .createGroupRequest(newValue)}
  }

  public var deleteGroupRequest: DeleteGroupRequest {
    get {
      if case .deleteGroupRequest(let v)? = _storage._kind {return v}
      return DeleteGroupRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupRequest(newValue)}
  }

  public var queryGroupRequest: QueryGroupRequest {
    get {
      if case .queryGroupRequest(let v)? = _storage._kind {return v}
      return QueryGroupRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupRequest(newValue)}
  }

  public var queryJoinedGroupsIdsRequest: QueryJoinedGroupsIdsRequest {
    get {
      if case .queryJoinedGroupsIdsRequest(let v)? = _storage._kind {return v}
      return QueryJoinedGroupsIdsRequest()
    }
    set {_uniqueStorage()._kind = .queryJoinedGroupsIdsRequest(newValue)}
  }

  public var queryJoinedGroupsInfosRequest: QueryJoinedGroupsInfosRequest {
    get {
      if case .queryJoinedGroupsInfosRequest(let v)? = _storage._kind {return v}
      return QueryJoinedGroupsInfosRequest()
    }
    set {_uniqueStorage()._kind = .queryJoinedGroupsInfosRequest(newValue)}
  }

  public var updateGroupRequest: UpdateGroupRequest {
    get {
      if case .updateGroupRequest(let v)? = _storage._kind {return v}
      return UpdateGroupRequest()
    }
    set {_uniqueStorage()._kind = .updateGroupRequest(newValue)}
  }

  /// Group Blacklist
  public var createGroupBlacklistedUserRequest: CreateGroupBlacklistedUserRequest {
    get {
      if case .createGroupBlacklistedUserRequest(let v)? = _storage._kind {return v}
      return CreateGroupBlacklistedUserRequest()
    }
    set {_uniqueStorage()._kind = .createGroupBlacklistedUserRequest(newValue)}
  }

  public var deleteGroupBlacklistedUserRequest: DeleteGroupBlacklistedUserRequest {
    get {
      if case .deleteGroupBlacklistedUserRequest(let v)? = _storage._kind {return v}
      return DeleteGroupBlacklistedUserRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupBlacklistedUserRequest(newValue)}
  }

  public var queryGroupBlacklistedUsersIdsRequest: QueryGroupBlacklistedUsersIdsRequest {
    get {
      if case .queryGroupBlacklistedUsersIdsRequest(let v)? = _storage._kind {return v}
      return QueryGroupBlacklistedUsersIdsRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupBlacklistedUsersIdsRequest(newValue)}
  }

  public var queryGroupBlacklistedUsersInfosRequest: QueryGroupBlacklistedUsersInfosRequest {
    get {
      if case .queryGroupBlacklistedUsersInfosRequest(let v)? = _storage._kind {return v}
      return QueryGroupBlacklistedUsersInfosRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupBlacklistedUsersInfosRequest(newValue)}
  }

  /// Group Enrollment
  public var checkGroupJoinQuestionsAnswersRequest: CheckGroupJoinQuestionsAnswersRequest {
    get {
      if case .checkGroupJoinQuestionsAnswersRequest(let v)? = _storage._kind {return v}
      return CheckGroupJoinQuestionsAnswersRequest()
    }
    set {_uniqueStorage()._kind = .checkGroupJoinQuestionsAnswersRequest(newValue)}
  }

  public var createGroupInvitationRequest: CreateGroupInvitationRequest {
    get {
      if case .createGroupInvitationRequest(let v)? = _storage._kind {return v}
      return CreateGroupInvitationRequest()
    }
    set {_uniqueStorage()._kind = .createGroupInvitationRequest(newValue)}
  }

  public var createGroupJoinRequestRequest: CreateGroupJoinRequestRequest {
    get {
      if case .createGroupJoinRequestRequest(let v)? = _storage._kind {return v}
      return CreateGroupJoinRequestRequest()
    }
    set {_uniqueStorage()._kind = .createGroupJoinRequestRequest(newValue)}
  }

  public var createGroupJoinQuestionRequest: CreateGroupJoinQuestionRequest {
    get {
      if case .createGroupJoinQuestionRequest(let v)? = _storage._kind {return v}
      return CreateGroupJoinQuestionRequest()
    }
    set {_uniqueStorage()._kind = .createGroupJoinQuestionRequest(newValue)}
  }

  public var deleteGroupInvitationRequest: DeleteGroupInvitationRequest {
    get {
      if case .deleteGroupInvitationRequest(let v)? = _storage._kind {return v}
      return DeleteGroupInvitationRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupInvitationRequest(newValue)}
  }

  public var deleteGroupJoinRequestRequest: DeleteGroupJoinRequestRequest {
    get {
      if case .deleteGroupJoinRequestRequest(let v)? = _storage._kind {return v}
      return DeleteGroupJoinRequestRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupJoinRequestRequest(newValue)}
  }

  public var deleteGroupJoinQuestionRequest: DeleteGroupJoinQuestionRequest {
    get {
      if case .deleteGroupJoinQuestionRequest(let v)? = _storage._kind {return v}
      return DeleteGroupJoinQuestionRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupJoinQuestionRequest(newValue)}
  }

  public var queryGroupInvitationsRequest: QueryGroupInvitationsRequest {
    get {
      if case .queryGroupInvitationsRequest(let v)? = _storage._kind {return v}
      return QueryGroupInvitationsRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupInvitationsRequest(newValue)}
  }

  public var queryGroupJoinRequestsRequest: QueryGroupJoinRequestsRequest {
    get {
      if case .queryGroupJoinRequestsRequest(let v)? = _storage._kind {return v}
      return QueryGroupJoinRequestsRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupJoinRequestsRequest(newValue)}
  }

  public var queryGroupJoinQuestionsRequest: QueryGroupJoinQuestionsRequest {
    get {
      if case .queryGroupJoinQuestionsRequest(let v)? = _storage._kind {return v}
      return QueryGroupJoinQuestionsRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupJoinQuestionsRequest(newValue)}
  }

  public var updateGroupJoinQuestionRequest: UpdateGroupJoinQuestionRequest {
    get {
      if case .updateGroupJoinQuestionRequest(let v)? = _storage._kind {return v}
      return UpdateGroupJoinQuestionRequest()
    }
    set {_uniqueStorage()._kind = .updateGroupJoinQuestionRequest(newValue)}
  }

  /// Group Member
  public var createGroupMemberRequest: CreateGroupMemberRequest {
    get {
      if case .createGroupMemberRequest(let v)? = _storage._kind {return v}
      return CreateGroupMemberRequest()
    }
    set {_uniqueStorage()._kind = .createGroupMemberRequest(newValue)}
  }

  public var deleteGroupMemberRequest: DeleteGroupMemberRequest {
    get {
      if case .deleteGroupMemberRequest(let v)? = _storage._kind {return v}
      return DeleteGroupMemberRequest()
    }
    set {_uniqueStorage()._kind = .deleteGroupMemberRequest(newValue)}
  }

  public var queryGroupMembersRequest: QueryGroupMembersRequest {
    get {
      if case .queryGroupMembersRequest(let v)? = _storage._kind {return v}
      return QueryGroupMembersRequest()
    }
    set {_uniqueStorage()._kind = .queryGroupMembersRequest(newValue)}
  }

  public var updateGroupMemberRequest: UpdateGroupMemberRequest {
    get {
      if case .updateGroupMemberRequest(let v)? = _storage._kind {return v}
      return UpdateGroupMemberRequest()
    }
    set {_uniqueStorage()._kind = .updateGroupMemberRequest(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    /// Signal
    case ackRequest(AckRequest)
    /// Message
    case createMessageRequest(CreateMessageRequest)
    case queryMessageStatusesRequest(QueryMessageStatusesRequest)
    case queryMessagesRequest(QueryMessagesRequest)
    case queryPendingMessagesWithTotalRequest(QueryPendingMessagesWithTotalRequest)
    case updateMessageRequest(UpdateMessageRequest)
    case updateTypingStatusRequest(UpdateTypingStatusRequest)
    /// User
    case queryUserGroupInvitationsRequest(QueryUserGroupInvitationsRequest)
    case queryUserProfileRequest(QueryUserProfileRequest)
    case queryUsersIdsNearbyRequest(QueryUsersIdsNearbyRequest)
    case queryUsersInfosNearbyRequest(QueryUsersInfosNearbyRequest)
    case queryUsersOnlineStatusRequest(QueryUsersOnlineStatusRequest)
    case updateUserLocationRequest(UpdateUserLocationRequest)
    case updateUserOnlineStatusRequest(UpdateUserOnlineStatusRequest)
    case updateUserRequest(UpdateUserRequest)
    /// User Relationship
    case createFriendRequestRequest(CreateFriendRequestRequest)
    case createRelationshipGroupRequest(CreateRelationshipGroupRequest)
    case createRelationshipRequest(CreateRelationshipRequest)
    case deleteRelationshipGroupRequest(DeleteRelationshipGroupRequest)
    case deleteRelationshipRequest(DeleteRelationshipRequest)
    case queryFriendRequestsRequest(QueryFriendRequestsRequest)
    case queryRelatedUsersIdsRequest(QueryRelatedUsersIdsRequest)
    case queryRelationshipGroupsRequest(QueryRelationshipGroupsRequest)
    case queryRelationshipsRequest(QueryRelationshipsRequest)
    case updateFriendRequestRequest(UpdateFriendRequestRequest)
    case updateRelationshipGroupRequest(UpdateRelationshipGroupRequest)
    case updateRelationshipRequest(UpdateRelationshipRequest)
    /// Group
    case createGroupRequest(CreateGroupRequest)
    case deleteGroupRequest(DeleteGroupRequest)
    case queryGroupRequest(QueryGroupRequest)
    case queryJoinedGroupsIdsRequest(QueryJoinedGroupsIdsRequest)
    case queryJoinedGroupsInfosRequest(QueryJoinedGroupsInfosRequest)
    case updateGroupRequest(UpdateGroupRequest)
    /// Group Blacklist
    case createGroupBlacklistedUserRequest(CreateGroupBlacklistedUserRequest)
    case deleteGroupBlacklistedUserRequest(DeleteGroupBlacklistedUserRequest)
    case queryGroupBlacklistedUsersIdsRequest(QueryGroupBlacklistedUsersIdsRequest)
    case queryGroupBlacklistedUsersInfosRequest(QueryGroupBlacklistedUsersInfosRequest)
    /// Group Enrollment
    case checkGroupJoinQuestionsAnswersRequest(CheckGroupJoinQuestionsAnswersRequest)
    case createGroupInvitationRequest(CreateGroupInvitationRequest)
    case createGroupJoinRequestRequest(CreateGroupJoinRequestRequest)
    case createGroupJoinQuestionRequest(CreateGroupJoinQuestionRequest)
    case deleteGroupInvitationRequest(DeleteGroupInvitationRequest)
    case deleteGroupJoinRequestRequest(DeleteGroupJoinRequestRequest)
    case deleteGroupJoinQuestionRequest(DeleteGroupJoinQuestionRequest)
    case queryGroupInvitationsRequest(QueryGroupInvitationsRequest)
    case queryGroupJoinRequestsRequest(QueryGroupJoinRequestsRequest)
    case queryGroupJoinQuestionsRequest(QueryGroupJoinQuestionsRequest)
    case updateGroupJoinQuestionRequest(UpdateGroupJoinQuestionRequest)
    /// Group Member
    case createGroupMemberRequest(CreateGroupMemberRequest)
    case deleteGroupMemberRequest(DeleteGroupMemberRequest)
    case queryGroupMembersRequest(QueryGroupMembersRequest)
    case updateGroupMemberRequest(UpdateGroupMemberRequest)

  #if !swift(>=4.1)
    public static func ==(lhs: TurmsRequest.OneOf_Kind, rhs: TurmsRequest.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.ackRequest(let l), .ackRequest(let r)): return l == r
      case (.createMessageRequest(let l), .createMessageRequest(let r)): return l == r
      case (.queryMessageStatusesRequest(let l), .queryMessageStatusesRequest(let r)): return l == r
      case (.queryMessagesRequest(let l), .queryMessagesRequest(let r)): return l == r
      case (.queryPendingMessagesWithTotalRequest(let l), .queryPendingMessagesWithTotalRequest(let r)): return l == r
      case (.updateMessageRequest(let l), .updateMessageRequest(let r)): return l == r
      case (.updateTypingStatusRequest(let l), .updateTypingStatusRequest(let r)): return l == r
      case (.queryUserGroupInvitationsRequest(let l), .queryUserGroupInvitationsRequest(let r)): return l == r
      case (.queryUserProfileRequest(let l), .queryUserProfileRequest(let r)): return l == r
      case (.queryUsersIdsNearbyRequest(let l), .queryUsersIdsNearbyRequest(let r)): return l == r
      case (.queryUsersInfosNearbyRequest(let l), .queryUsersInfosNearbyRequest(let r)): return l == r
      case (.queryUsersOnlineStatusRequest(let l), .queryUsersOnlineStatusRequest(let r)): return l == r
      case (.updateUserLocationRequest(let l), .updateUserLocationRequest(let r)): return l == r
      case (.updateUserOnlineStatusRequest(let l), .updateUserOnlineStatusRequest(let r)): return l == r
      case (.updateUserRequest(let l), .updateUserRequest(let r)): return l == r
      case (.createFriendRequestRequest(let l), .createFriendRequestRequest(let r)): return l == r
      case (.createRelationshipGroupRequest(let l), .createRelationshipGroupRequest(let r)): return l == r
      case (.createRelationshipRequest(let l), .createRelationshipRequest(let r)): return l == r
      case (.deleteRelationshipGroupRequest(let l), .deleteRelationshipGroupRequest(let r)): return l == r
      case (.deleteRelationshipRequest(let l), .deleteRelationshipRequest(let r)): return l == r
      case (.queryFriendRequestsRequest(let l), .queryFriendRequestsRequest(let r)): return l == r
      case (.queryRelatedUsersIdsRequest(let l), .queryRelatedUsersIdsRequest(let r)): return l == r
      case (.queryRelationshipGroupsRequest(let l), .queryRelationshipGroupsRequest(let r)): return l == r
      case (.queryRelationshipsRequest(let l), .queryRelationshipsRequest(let r)): return l == r
      case (.updateFriendRequestRequest(let l), .updateFriendRequestRequest(let r)): return l == r
      case (.updateRelationshipGroupRequest(let l), .updateRelationshipGroupRequest(let r)): return l == r
      case (.updateRelationshipRequest(let l), .updateRelationshipRequest(let r)): return l == r
      case (.createGroupRequest(let l), .createGroupRequest(let r)): return l == r
      case (.deleteGroupRequest(let l), .deleteGroupRequest(let r)): return l == r
      case (.queryGroupRequest(let l), .queryGroupRequest(let r)): return l == r
      case (.queryJoinedGroupsIdsRequest(let l), .queryJoinedGroupsIdsRequest(let r)): return l == r
      case (.queryJoinedGroupsInfosRequest(let l), .queryJoinedGroupsInfosRequest(let r)): return l == r
      case (.updateGroupRequest(let l), .updateGroupRequest(let r)): return l == r
      case (.createGroupBlacklistedUserRequest(let l), .createGroupBlacklistedUserRequest(let r)): return l == r
      case (.deleteGroupBlacklistedUserRequest(let l), .deleteGroupBlacklistedUserRequest(let r)): return l == r
      case (.queryGroupBlacklistedUsersIdsRequest(let l), .queryGroupBlacklistedUsersIdsRequest(let r)): return l == r
      case (.queryGroupBlacklistedUsersInfosRequest(let l), .queryGroupBlacklistedUsersInfosRequest(let r)): return l == r
      case (.checkGroupJoinQuestionsAnswersRequest(let l), .checkGroupJoinQuestionsAnswersRequest(let r)): return l == r
      case (.createGroupInvitationRequest(let l), .createGroupInvitationRequest(let r)): return l == r
      case (.createGroupJoinRequestRequest(let l), .createGroupJoinRequestRequest(let r)): return l == r
      case (.createGroupJoinQuestionRequest(let l), .createGroupJoinQuestionRequest(let r)): return l == r
      case (.deleteGroupInvitationRequest(let l), .deleteGroupInvitationRequest(let r)): return l == r
      case (.deleteGroupJoinRequestRequest(let l), .deleteGroupJoinRequestRequest(let r)): return l == r
      case (.deleteGroupJoinQuestionRequest(let l), .deleteGroupJoinQuestionRequest(let r)): return l == r
      case (.queryGroupInvitationsRequest(let l), .queryGroupInvitationsRequest(let r)): return l == r
      case (.queryGroupJoinRequestsRequest(let l), .queryGroupJoinRequestsRequest(let r)): return l == r
      case (.queryGroupJoinQuestionsRequest(let l), .queryGroupJoinQuestionsRequest(let r)): return l == r
      case (.updateGroupJoinQuestionRequest(let l), .updateGroupJoinQuestionRequest(let r)): return l == r
      case (.createGroupMemberRequest(let l), .createGroupMemberRequest(let r)): return l == r
      case (.deleteGroupMemberRequest(let l), .deleteGroupMemberRequest(let r)): return l == r
      case (.queryGroupMembersRequest(let l), .queryGroupMembersRequest(let r)): return l == r
      case (.updateGroupMemberRequest(let l), .updateGroupMemberRequest(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "im.turms.proto"

extension TurmsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TurmsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "ack_request"),
    5: .standard(proto: "create_message_request"),
    6: .standard(proto: "query_message_statuses_request"),
    7: .standard(proto: "query_messages_request"),
    8: .standard(proto: "query_pending_messages_with_total_request"),
    9: .standard(proto: "update_message_request"),
    10: .standard(proto: "update_typing_status_request"),
    100: .standard(proto: "query_user_group_invitations_request"),
    101: .standard(proto: "query_user_profile_request"),
    102: .standard(proto: "query_users_ids_nearby_request"),
    103: .standard(proto: "query_users_infos_nearby_request"),
    104: .standard(proto: "query_users_online_status_request"),
    105: .standard(proto: "update_user_location_request"),
    106: .standard(proto: "update_user_online_status_request"),
    107: .standard(proto: "update_user_request"),
    200: .standard(proto: "create_friend_request_request"),
    201: .standard(proto: "create_relationship_group_request"),
    202: .standard(proto: "create_relationship_request"),
    203: .standard(proto: "delete_relationship_group_request"),
    204: .standard(proto: "delete_relationship_request"),
    205: .standard(proto: "query_friend_requests_request"),
    206: .standard(proto: "query_related_users_ids_request"),
    207: .standard(proto: "query_relationship_groups_request"),
    208: .standard(proto: "query_relationships_request"),
    209: .standard(proto: "update_friend_request_request"),
    210: .standard(proto: "update_relationship_group_request"),
    211: .standard(proto: "update_relationship_request"),
    300: .standard(proto: "create_group_request"),
    301: .standard(proto: "delete_group_request"),
    302: .standard(proto: "query_group_request"),
    303: .standard(proto: "query_joined_groups_ids_request"),
    304: .standard(proto: "query_joined_groups_infos_request"),
    305: .standard(proto: "update_group_request"),
    400: .standard(proto: "create_group_blacklisted_user_request"),
    401: .standard(proto: "delete_group_blacklisted_user_request"),
    402: .standard(proto: "query_group_blacklisted_users_ids_request"),
    403: .standard(proto: "query_group_blacklisted_users_infos_request"),
    500: .standard(proto: "check_group_join_questions_answers_request"),
    501: .standard(proto: "create_group_invitation_request"),
    502: .standard(proto: "create_group_join_request_request"),
    503: .standard(proto: "create_group_join_question_request"),
    504: .standard(proto: "delete_group_invitation_request"),
    505: .standard(proto: "delete_group_join_request_request"),
    506: .standard(proto: "delete_group_join_question_request"),
    507: .standard(proto: "query_group_invitations_request"),
    508: .standard(proto: "query_group_join_requests_request"),
    509: .standard(proto: "query_group_join_questions_request"),
    510: .standard(proto: "update_group_join_question_request"),
    600: .standard(proto: "create_group_member_request"),
    601: .standard(proto: "delete_group_member_request"),
    602: .standard(proto: "query_group_members_request"),
    603: .standard(proto: "update_group_member_request"),
  ]

  fileprivate class _StorageClass {
    var _requestID: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _kind: TurmsRequest.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._requestID)
        case 2:
          var v: AckRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .ackRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .ackRequest(v)}
        case 5:
          var v: CreateMessageRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createMessageRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createMessageRequest(v)}
        case 6:
          var v: QueryMessageStatusesRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryMessageStatusesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryMessageStatusesRequest(v)}
        case 7:
          var v: QueryMessagesRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryMessagesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryMessagesRequest(v)}
        case 8:
          var v: QueryPendingMessagesWithTotalRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryPendingMessagesWithTotalRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryPendingMessagesWithTotalRequest(v)}
        case 9:
          var v: UpdateMessageRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateMessageRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateMessageRequest(v)}
        case 10:
          var v: UpdateTypingStatusRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateTypingStatusRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateTypingStatusRequest(v)}
        case 100:
          var v: QueryUserGroupInvitationsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryUserGroupInvitationsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryUserGroupInvitationsRequest(v)}
        case 101:
          var v: QueryUserProfileRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryUserProfileRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryUserProfileRequest(v)}
        case 102:
          var v: QueryUsersIdsNearbyRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryUsersIdsNearbyRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryUsersIdsNearbyRequest(v)}
        case 103:
          var v: QueryUsersInfosNearbyRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryUsersInfosNearbyRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryUsersInfosNearbyRequest(v)}
        case 104:
          var v: QueryUsersOnlineStatusRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryUsersOnlineStatusRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryUsersOnlineStatusRequest(v)}
        case 105:
          var v: UpdateUserLocationRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateUserLocationRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateUserLocationRequest(v)}
        case 106:
          var v: UpdateUserOnlineStatusRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateUserOnlineStatusRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateUserOnlineStatusRequest(v)}
        case 107:
          var v: UpdateUserRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateUserRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateUserRequest(v)}
        case 200:
          var v: CreateFriendRequestRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createFriendRequestRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createFriendRequestRequest(v)}
        case 201:
          var v: CreateRelationshipGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createRelationshipGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createRelationshipGroupRequest(v)}
        case 202:
          var v: CreateRelationshipRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createRelationshipRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createRelationshipRequest(v)}
        case 203:
          var v: DeleteRelationshipGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteRelationshipGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteRelationshipGroupRequest(v)}
        case 204:
          var v: DeleteRelationshipRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteRelationshipRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteRelationshipRequest(v)}
        case 205:
          var v: QueryFriendRequestsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryFriendRequestsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryFriendRequestsRequest(v)}
        case 206:
          var v: QueryRelatedUsersIdsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryRelatedUsersIdsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryRelatedUsersIdsRequest(v)}
        case 207:
          var v: QueryRelationshipGroupsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryRelationshipGroupsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryRelationshipGroupsRequest(v)}
        case 208:
          var v: QueryRelationshipsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryRelationshipsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryRelationshipsRequest(v)}
        case 209:
          var v: UpdateFriendRequestRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateFriendRequestRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateFriendRequestRequest(v)}
        case 210:
          var v: UpdateRelationshipGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateRelationshipGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateRelationshipGroupRequest(v)}
        case 211:
          var v: UpdateRelationshipRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateRelationshipRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateRelationshipRequest(v)}
        case 300:
          var v: CreateGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupRequest(v)}
        case 301:
          var v: DeleteGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupRequest(v)}
        case 302:
          var v: QueryGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupRequest(v)}
        case 303:
          var v: QueryJoinedGroupsIdsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryJoinedGroupsIdsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryJoinedGroupsIdsRequest(v)}
        case 304:
          var v: QueryJoinedGroupsInfosRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryJoinedGroupsInfosRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryJoinedGroupsInfosRequest(v)}
        case 305:
          var v: UpdateGroupRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateGroupRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateGroupRequest(v)}
        case 400:
          var v: CreateGroupBlacklistedUserRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupBlacklistedUserRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupBlacklistedUserRequest(v)}
        case 401:
          var v: DeleteGroupBlacklistedUserRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupBlacklistedUserRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupBlacklistedUserRequest(v)}
        case 402:
          var v: QueryGroupBlacklistedUsersIdsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupBlacklistedUsersIdsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupBlacklistedUsersIdsRequest(v)}
        case 403:
          var v: QueryGroupBlacklistedUsersInfosRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupBlacklistedUsersInfosRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupBlacklistedUsersInfosRequest(v)}
        case 500:
          var v: CheckGroupJoinQuestionsAnswersRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .checkGroupJoinQuestionsAnswersRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .checkGroupJoinQuestionsAnswersRequest(v)}
        case 501:
          var v: CreateGroupInvitationRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupInvitationRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupInvitationRequest(v)}
        case 502:
          var v: CreateGroupJoinRequestRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupJoinRequestRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupJoinRequestRequest(v)}
        case 503:
          var v: CreateGroupJoinQuestionRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupJoinQuestionRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupJoinQuestionRequest(v)}
        case 504:
          var v: DeleteGroupInvitationRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupInvitationRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupInvitationRequest(v)}
        case 505:
          var v: DeleteGroupJoinRequestRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupJoinRequestRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupJoinRequestRequest(v)}
        case 506:
          var v: DeleteGroupJoinQuestionRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupJoinQuestionRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupJoinQuestionRequest(v)}
        case 507:
          var v: QueryGroupInvitationsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupInvitationsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupInvitationsRequest(v)}
        case 508:
          var v: QueryGroupJoinRequestsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupJoinRequestsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupJoinRequestsRequest(v)}
        case 509:
          var v: QueryGroupJoinQuestionsRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupJoinQuestionsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupJoinQuestionsRequest(v)}
        case 510:
          var v: UpdateGroupJoinQuestionRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateGroupJoinQuestionRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateGroupJoinQuestionRequest(v)}
        case 600:
          var v: CreateGroupMemberRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .createGroupMemberRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .createGroupMemberRequest(v)}
        case 601:
          var v: DeleteGroupMemberRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .deleteGroupMemberRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .deleteGroupMemberRequest(v)}
        case 602:
          var v: QueryGroupMembersRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .queryGroupMembersRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .queryGroupMembersRequest(v)}
        case 603:
          var v: UpdateGroupMemberRequest?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .updateGroupMemberRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .updateGroupMemberRequest(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._requestID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._kind {
      case .ackRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .createMessageRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .queryMessageStatusesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .queryMessagesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .queryPendingMessagesWithTotalRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .updateMessageRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .updateTypingStatusRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .queryUserGroupInvitationsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case .queryUserProfileRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .queryUsersIdsNearbyRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      case .queryUsersInfosNearbyRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      case .queryUsersOnlineStatusRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      case .updateUserLocationRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      case .updateUserOnlineStatusRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      case .updateUserRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      case .createFriendRequestRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      case .createRelationshipGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      case .createRelationshipRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
      case .deleteRelationshipGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 203)
      case .deleteRelationshipRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
      case .queryFriendRequestsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 205)
      case .queryRelatedUsersIdsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 206)
      case .queryRelationshipGroupsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 207)
      case .queryRelationshipsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 208)
      case .updateFriendRequestRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 209)
      case .updateRelationshipGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 210)
      case .updateRelationshipRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 211)
      case .createGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
      case .deleteGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      case .queryGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 302)
      case .queryJoinedGroupsIdsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 303)
      case .queryJoinedGroupsInfosRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 304)
      case .updateGroupRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 305)
      case .createGroupBlacklistedUserRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
      case .deleteGroupBlacklistedUserRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 401)
      case .queryGroupBlacklistedUsersIdsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 402)
      case .queryGroupBlacklistedUsersInfosRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 403)
      case .checkGroupJoinQuestionsAnswersRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 500)
      case .createGroupInvitationRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 501)
      case .createGroupJoinRequestRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 502)
      case .createGroupJoinQuestionRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 503)
      case .deleteGroupInvitationRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 504)
      case .deleteGroupJoinRequestRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 505)
      case .deleteGroupJoinQuestionRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 506)
      case .queryGroupInvitationsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 507)
      case .queryGroupJoinRequestsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 508)
      case .queryGroupJoinQuestionsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 509)
      case .updateGroupJoinQuestionRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 510)
      case .createGroupMemberRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 600)
      case .deleteGroupMemberRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 601)
      case .queryGroupMembersRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 602)
      case .updateGroupMemberRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 603)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TurmsRequest, rhs: TurmsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requestID != rhs_storage._requestID {return false}
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
